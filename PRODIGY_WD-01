<!DOCTYPE html>
<html>
<head>
  <title>Tic-Tac-Toe</title>
  <style>
    body {
      font-family: sans-serif;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background-color: #f0f0f0;
    }

    .container {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: #fff;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-template-rows: repeat(3, 100px);
      gap: 5px;
    }

    .cell {
      width: 100px;
      height: 100px;
      border: 2px solid #ccc;
      border-radius: 5px;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 48px;
      cursor: pointer;
    }

    .cell.x {
      color: #000;
    }

    .cell.o {
      color: #ff0000;
    }

    .message {
      margin-top: 20px;
      font-size: 18px;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Tic-Tac-Toe</h1>
    <div class="board" id="board"></div>
    <div class="message" id="message"></div>
    <button id="resetButton">Reset Game</button>
  </div>

  <script>
    const board = document.getElementById('board');
    const message = document.getElementById('message');
    const resetButton = document.getElementById('resetButton');

    let currentPlayer = 'X';
    let boardState = ['', '', '', '', '', '', '', '', ''];

    // Create the board cells
    for (let i = 0; i < 9; i++) {
      const cell = document.createElement('div');
      cell.classList.add('cell');
      cell.addEventListener('click', handleClick);
      board.appendChild(cell);
    }

    // Handle cell click
    function handleClick(event) {
      const cellIndex = Array.from(board.children).indexOf(event.target);

      // Check if cell is already occupied
      if (boardState[cellIndex] !== '') return;

      // Update board state
      boardState[cellIndex] = currentPlayer;

      // Update cell display
      event.target.textContent = currentPlayer;
      event.target.classList.add(currentPlayer.toLowerCase());

      // Check for winner or tie
      if (checkWin() || checkTie()) {
        // Disable further clicks
        board.querySelectorAll('.cell').forEach(cell => {
          cell.removeEventListener('click', handleClick);
        });

        if (checkWin()) {
          message.textContent = `${currentPlayer} wins!`;
        } else {
          message.textContent = 'It\'s a tie!';
        }
      } else {
        // Switch player
        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
        message.textContent = `${currentPlayer}'s turn`;
      }
    }

    // Check for win condition
    function checkWin() {
      const winConditions = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
        [0, 4, 8], [2, 4, 6] // Diagonals
      ];

      for (const condition of winConditions) {
        if (
          boardState[condition[0]] !== '' &&
          boardState[condition[0]] === boardState[condition[1]] &&
          boardState[condition[0]] === boardState[condition[2]]
        ) {
          return true;
        }
      }

      return false;
    }

    // Check for tie condition
    function checkTie() {
      return boardState.every(cell => cell !== '');
    }

    // Reset game
    resetButton.addEventListener('click', () => {
      currentPlayer = 'X';
      boardState = ['', '', '', '', '', '', '', '', ''];
      message.textContent = `${currentPlayer}'s turn`;

      // Clear board display
      board.querySelectorAll('.cell').forEach(cell => {
        cell.textContent = '';
        cell.classList.remove('x', 'o');
        cell.addEventListener('click', handleClick);
      });
    });
  </script>
</body>
</html>
